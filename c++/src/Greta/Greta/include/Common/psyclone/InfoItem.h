/***************************** License **********************************

 Copyright (C) 2006 by Communicative Machines
 http://www.cmlabs.com   All rights reserved.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

************************************************************************/


#if !defined(_INFOITEM_)
#define _INFOITEM_

#include "Object.h"
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "JString.h"
#include "Collections.h"
#include "JTime.h"
#include "DotString.h"
#include "XMLParser.h"

namespace cmlabs {

class InfoItem : public Object {
 public:
	//! to create empty InfoItem
	InfoItem();
	//! to create from XML
	InfoItem(const JString& xml);
	//! to create from XML node
	InfoItem(XMLNode* node);
	//! to create from other InfoItem
	InfoItem(const InfoItem &item);  
	~InfoItem();

	bool unitTest();
	Object* clone() const;
	InfoItem* cloneDataOnly() const;
	InfoItem& operator=(const InfoItem &item);

// ***************************************************************
// File Functions
// ***************************************************************

	bool loadFromFile(const JString& filename);
	bool writeToFile(const JString& filename);

// ***************************************************************
// XML/HTML/Text Functions
// ***************************************************************

	//! Read XML node into this InfoItem...
	bool fromXML(XMLNode* xmlNode);
	//! Convert InfoItem to XML...
	JString toXML();          

	//! Nicely formatted text print
	JString print();
	//! One line text print
	JString printShort();
	//! Generate HTML...
	JString printHTML(JString htmlTemplate = "");
	JString toHTML();

// ***************************************************************
// Binary Functions
// ***************************************************************

	//! Get the size of binary data chunk, -1 for all chunks
	long getBinarySize(int chunk);
	//! Get the number of data chunks
	int getBinaryChunkCount();
	//! Write binary data to buffer at chunk number 'chunk'
	long toBinaryBuffer(int chunk, char* buffer, int maxlen);
	//! Set the data after separate reception
	bool fromBinaryBuffer(int chunk, char* buffer, long len);

// ***************************************************************
// Global Setters and Getters
// ***************************************************************

	//! Set the attached Object for the InfoItem
	bool setObject(Object* obj);
	//! Get the attached Object for the InfoItem or NULL
	Object* getObject();
	//! Get the attached Object type (Class name) for the InfoItem
	JString getObjectType();
	//! Delete the attached Object; NB: Will destroy object
	bool deleteObject();
	//! Takes away the attached object
	Object* takeObject();

	// Getters

	//! Get a copy of ID
	JString getID();       
	JTime getCreatedTime();
	JString getEntry(const JString& name);
	JTime getTime(const JString& name);

	// Setters

	//! Set InfoItem ID, autogenerated if not set
	bool setID(const JString& id);             
	bool setCreatedTime(const JTime& time);
	bool setEntry(const JString& name, const JString& value);
	bool setTime(const JString& name, const JTime& t);



	JString id;
	JTime createdTime;
	//! Dictionary of generic text entries
	Dictionary auxDict;
	//! Dictionary of Timestamps
	ObjectDictionary timeDict;
	Object* object;


};

} // namespace cmlabs

#endif

