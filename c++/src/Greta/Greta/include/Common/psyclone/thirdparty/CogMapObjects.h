/***************************** License **********************************

 Copyright (C) 2006 by Communicative Machines
 http://www.cmlabs.com   All rights reserved.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

************************************************************************/

#include "Collections.h"
#include "InfoItem.h"
#include "UninstantiatedXMLObject.h"

#ifndef _COGMAPOBJECTS_H_
#define _COGMAPOBJECTS_H_

namespace cmlabs {

///
/// The <b>CMMEASUREMENT_NOVALUE</b> define will be used to signify 
/// that the value has not been set to anything yet.
///
#define CMMEASUREMENT_NOVALUE -987654321


///////////////////////////////////////////////////////////////////////////////
///  CMMeasurement
///  This class will be used to store multidimensional measurements
///  including uncertainties of these
///
///  Base class Object
///
///  @remarks 
///
///  @author CMLabs Inc. @date 15-02-2007
///////////////////////////////////////////////////////////////////////////////
/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
class CMMeasurement : public Object {
public:
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMMeasurement
	///  This constructs a onedimensional measurement
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMMeasurement();
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMMeasurement
	///  This constructs a multidimensional measurement
	///
	///  @param [in]       name   type <b>const JString &</b> the name of the measurement
	///  @param [in]       dim   type <b>unsigned int</b> the dimensionality of the measurement
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMMeasurement(const JString& name, unsigned int dim);
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMMeasurement
	///  This constructs a measurement from XML
	///
	///  @param [in]       xml   type <b>const JString &</b> raw XML
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMMeasurement(const JString& xml);
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMMeasurement
	///  This constructs a measurement from an XML node
	///
	///  @param [in, out]  node   type <b>XMLNode *</b> node containing interpreted XML
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMMeasurement(XMLNode* node);
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual destructor  ~CMMeasurement
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	~CMMeasurement();

	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  toXML
	///  The <b>toXML</b> method converts the object to XML and returns this as a <b>JString</b>
	///
	/// <code><pre>
	///    JString xml = obj->toXML();
	/// </pre></code>
	///
	///  @return <ul><li>non-empty <b>JString</b> if successful, or</li>
	///          <li>empty <b>JString</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString toXML();
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  fromXML
	///  The <b>fromXML</b> method returns reads in the XML and overwrites the values
	///  of the object with the data stored in the XML
	///
	/// <code><pre>
	///    obj->fromXML(xmlNode);
	/// </pre></code>
	///
	///  @param [in, out]  node   type <b>XMLNode *</b> contains the interpreted XML
	///
	///  @return <ul><li><b>true</b> if successful, or</li>
	///          <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool fromXML(XMLNode* node);
	///////////////////////////////////////////////////////////////////////////////
	///  public constant  print
	///  The <b>print</b> method returns textual information as a <b>JString</b>
	///
	/// <code><pre>
	///    text = obj->print();
	/// </pre></code>
	///
	///  @return <ul><li>non-empty <b>JString</b> if successful, or</li>
	///          <li>empty <b>JString</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString print() const;
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  toHTML
	///  The <b>toHTML</b> method describes the object as HTML by returning a <b>JString</b>
	///  ...
	///
	/// <code><pre>
	///   html = obj->toHTML();
	/// </pre></code>
	///
	///  @return <ul><li>non-empty <b>JString</b> if successful, or</li>
	///          <li>empty <b>JString</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString toHTML();

	///////////////////////////////////////////////////////////////////////////////
	///  public  toXMLParam
	///  The <b>toXMLParam</b> method returns a string with the XML parameters for this object.
	///  This is mainly used if the parent object wants to put this child object into the XML
	///  as a parameter instead of a subtag.
	///
	/// <code><pre>
	///   example: <xxx name="34" name_uncertainty="12" ... >
	/// </pre></code>
	///
	///  @param [in]       name   type <b>const JString &</b> parameter name
	///
	///  @return <ul><li>non-empty <b>JString</b> if successful, or</li>
	///          <li>empty <b>JString</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see fromXMLParam
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString toXMLParam(const JString& name);
	///////////////////////////////////////////////////////////////////////////////
	///  public  fromXMLParam
	///  The <b>fromXMLParam</b> method reads in the values from the parameter field of the XMLNode
	///  basically the reverse of toXMLParam
	///
	///  @param [in]       name   type <b>const JString &</b> parameter name
	///  @param [in, out]  node   type <b>XMLNode *</b> XML node
	///
	///  @return <ul><li><b>true</b> if successful, or</li>
	///          <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see toXMLParam
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool fromXMLParam(const JString& name, XMLNode* node);

	///////////////////////////////////////////////////////////////////////////////
	///  public virtual constant  clone
	///  The <b>clone</b> method returns a copy of the object as an <b>Object *</b>
	///
	/// <code><pre>
	///   obj2 = (CMMeasurement*) obj->clone(); 
	/// </pre></code>
	///
	///  @return <ul><li>non-NULL <b>Object *</b> if successful, or</li>
	///          <li><b>NULL</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	Object* clone() const;
	///////////////////////////////////////////////////////////////////////////////
	///  public  reset
	///  The <b>reset</b> method resets all the values to <b>CMMEASUREMENT_NOVALUE</b>
	///
	/// <code><pre>
	///   obj->reset();
	/// </pre></code>
	///
	///  @return <ul><li><b>true</b> if successful, or</li>
	///          <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool reset();

	///////////////////////////////////////////////////////////////////////////////
	///  public constant  operator []
	///  The <b>operator []</b> method returns the value at position N
	///
	/// <code><pre>
	///   value = obj[3];
	/// </pre></code>
	///
	///  @param [in]       n   type <b>int</b> position of value
	///
	///  @return <ul><li><b>double</b> if successful, or</li>
	///          <li><b>0</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	double operator[](int n) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public constant  getValue
	///  The <b>getValue</b> method returns the value at position N
	///
	/// <code><pre>
	///   value = obj->getValue(3);
	/// </pre></code>
	///
	///  @param [in]       n   type <b>int</b> position of value
	///
	///  @return <ul><li><b>double</b> if successful, or</li>
	///          <li><b>0</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	double getValue(int n) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public constant  getUncertainty
	///  The <b>getUncertainty</b> method returns uncertainty of the value at position N
	///  ...
	///
	/// <code><pre>
	///   value = obj->getUncertainty(3);
	/// </pre></code>
	///
	///  @param [in]       n   type <b>int</b> position of value
	///
	///  @return <ul><li><b>double</b> if successful, or</li>
	///          <li><b>0</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	double getUncertainty(int n) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public  setValue
	///  The <b>setValue</b> method sets the value at position N
	///
	/// <code><pre>
	///   obj->setValue(15.2);
	/// </pre></code>
	///
	///  @param [in]       n   type <b>int</b> position of value
	///  @param [in]       value   type <b>double</b> value to be set
	///
	///  @return <ul><li><b>true</b> if successful, or</li>
	///          <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool setValue(int n, double value);
	///////////////////////////////////////////////////////////////////////////////
	///  public  setUncertainty
	///  The <b>setUncertainty</b> method sets the uncertainty of the value at position N
	///  ...
	///
	/// <code><pre>
	///   obj->setUncertainty(15.2);
	/// </pre></code>
	///
	///  @param [in]       n   type <b>int</b> position of uncertainty
	///  @param [in]       value   type <b>double</b> value to be set
	///
	///  @return <ul><li><b>true</b> if successful, or</li>
	///          <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool setUncertainty(int n, double value);

	///////////////////////////////////////////////////////////////////////////////
	///  public virtual overloaded constant  equals
	///  The <b>equals</b> method returns true if the two measurements are identical.
	///  Version that accepts any CoreLibrary Object and returns false if the wrong object type is compared.
	///
	/// <code><pre>
	///   obj2->equals(obj1);
	/// </pre></code>
	///
	///  @param [in]       o   type <b>const Object *</b> CoreLibrary Object to be compared
	///
	///  @return <ul><li><b>true</b> if successful, or</li>
	///          <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool equals(const Object* o) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constant  equals
	///  The <b>equals</b> method returns true if the two measurements are identical.
	///
	/// <code><pre>
	///   obj2->equals(obj1);
	/// </pre></code>
	///
	///  @param [in]       m   type <b>const CMMeasurement &</b> measurement to be compared
	///
	///  @return <ul><li><b>true</b> if successful, or</li>
	///          <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool equals(const CMMeasurement& m) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constant  equals
	///  The <b>equals</b> method returns true if the two measurements are identical.
	///
	/// <code><pre>
	///   obj2->equals(obj1);
	/// </pre></code>
	///
	///  @param [in]       m   type <b>const CMMeasurement *</b> measurement to be compared
	///
	///  @return <ul><li><b>true</b> if successful, or</li>
	///          <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool equals(const CMMeasurement* m) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded  hasChangedSince
	///  The <b>hasChangedSince</b> method returns true if the measurement has changed since the last measurement was taken
	///
	///  @param [in]       m   type <b>const CMMeasurement &</b> last measurement
	///
	///  @return <ul><li><b>true</b> if successful, or</li>
	///          <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool hasChangedSince(const CMMeasurement& m);
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded  hasChangedSince
	///  The <b>hasChangedSince</b> method returns true if the measurement has changed since the last measurement was taken
	///  ...
	///
	/// <code><pre>
	///
	/// </pre></code>
	///
	///  @param [in]       m   type <b>const CMMeasurement *</b> last measurement
	///
	///  @return <ul><li><b>true</b> if successful, or</li>
	///          <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool hasChangedSince(const CMMeasurement* m);

	///////////////////////////////////////////////////////////////////////////////
	///  JString name
	///  Name of measurement
	///
	///  @remarks 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString name;
	///////////////////////////////////////////////////////////////////////////////
	///  unsigned int len
	///  Dimensionality of measurement
	///
	///  @remarks 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	unsigned len;
	///////////////////////////////////////////////////////////////////////////////
	///  double value
	///  Value of measurement
	///
	///  @remarks 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	double value;
	///////////////////////////////////////////////////////////////////////////////
	///  double uncertainty
	///  Uncertainty of measurement
	///
	///  @remarks 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	double uncertainty;
	///////////////////////////////////////////////////////////////////////////////
	///  JString units
	///  The optional unit of the measurement in text
	///
	///  @remarks 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString units;
	///////////////////////////////////////////////////////////////////////////////
	///  double * values
	///  The array of values for multidimensional data
	///
	///  @remarks 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	double* values;
	///////////////////////////////////////////////////////////////////////////////
	///  double * uncertainties
	///  The array of value uncertainties for multidimensional data
	///
	///  @remarks 
	///
	///  @author CMLabs Inc. @date 15-02-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	double* uncertainties;
};

class CMPoint : public Object {
public:
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMPoint
	///  The <b>CMPoint</b> method creates a CMPoint object
	///  
	/// <code><pre>
	///    obj = new CMPoint();
	/// </pre></code>
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMPoint();
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual destructor  ~CMPoint
	///  The <b>~CMPoint</b> method destroys a CMPoint
	///  
	/// <code><pre>
	///    delete(obj);
	/// </pre></code>
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	~CMPoint();
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMPoint
	///  The <b>CMPoint</b> method constructs a CMPoint from XML
	///  
	/// <code><pre>
	///    new CMPoint(xml);
	/// </pre></code>
	///
	///  @param [in]       xml type <b>const JString &</b> <i></i>   Raw XML string
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMPoint(const JString& xml);
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMPoint
	///  The <b>CMPoint</b> method constructs a CMPoint from an XMLNode
	///  
	/// <code><pre>
	///    obj->CMPoint();
	/// </pre></code>
	///
	///  @param [in, out]  node type <b>XMLNode *</b> <i></i>   XML Node containing XML
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMPoint(XMLNode* node);

	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  toXML
	///  The <b>toXML</b> method generates the XML representing the object
	///  
	/// <code><pre>
	///    val = obj->toXML();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>XML</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString toXML();
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  fromXML
	///  The <b>fromXML</b> method instantiates the CMPoint object from XML
	///  
	/// <code><pre>
	///    val = obj->fromXML(xmlnode);
	/// </pre></code>
	///
	///  @param [in, out]  node type <b>XMLNode *</b> <i></i>   XMLNode containing XML
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool fromXML(XMLNode* node);
	///////////////////////////////////////////////////////////////////////////////
	///  public constant  print
	///  The <b>print</b> method creates a string representation of the object
	///  
	/// <code><pre>
	///    val = obj->print();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>text</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString print() const;
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  toHTML
	///  The <b>toHTML</b> method creates HTML which represents the object
	///  
	/// <code><pre>
	///    val = obj->toHTML();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>HTML string</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString toHTML();

	///////////////////////////////////////////////////////////////////////////////
	///  public virtual constant  clone
	///  The <b>clone</b> method creates an identical object by cloning
	///  
	/// <code><pre>
	///    val = (CMPoint*) obj->clone();
	/// </pre></code>
	///
	///  @return <ul><li><b>Object *</b> containing <b>object</b> if successful, or</li>
	///                                       <li><b>NULL</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	Object* clone() const;
	///////////////////////////////////////////////////////////////////////////////
	///  public  reset
	///  The <b>reset</b> method resets the CMPoint to its default value content
	///  
	/// <code><pre>
	///    val = obj->reset();
	/// </pre></code>
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool reset();

	///////////////////////////////////////////////////////////////////////////////
	///  public constant  operator []
	///  The <b>operator []</b> method retrieves the Nth element value
	///  
	/// <code><pre>
	///    val = obj->operator[n];
	/// </pre></code>
	///
	///  @param [in]       n type <b>int</b> <i></i>   element position
	///
	///  @return <ul><li><b>double</b> containing <b>value</b> if successful, or</li>
	///                                       <li><b>0</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	double operator[](int n) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public constant  get
	///  The <b>get</b> method retrieves the Nth element value
	///  
	/// <code><pre>
	///    val = obj->get(n);
	/// </pre></code>
	///
	///  @param [in]       n type <b>int</b> <i></i>   element position
	///
	///  @return <ul><li><b>double</b> containing <b>value</b> if successful, or</li>
	///                                       <li><b>0</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	double get(int n) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public constant  getUncertainty
	///  The <b>getUncertainty</b> method retrieves the uncertainty for the Nth element value
	///  
	/// <code><pre>
	///    val = obj->getUncertainty(n);
	/// </pre></code>
	///
	///  @param [in]       n type <b>int</b> <i></i>   element position
	///
	///  @return <ul><li><b>double</b> containing <b>value</b> if successful, or</li>
	///                                       <li><b>0</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	double getUncertainty(int n) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded  set
	///  The <b>set</b> method sets the Nth element value
	///  
	/// <code><pre>
	///    val = obj->set(n, value);
	/// </pre></code>
	///
	///  @param [in]       n type <b>int</b> <i></i>   element position
	///  @param [in]       value type <b>double</b> <i></i>   value to set
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool set(int n, double value);
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded  set
	///  The <b>set</b> method sets the Nth element value and uncertainty
	///  
	/// <code><pre>
	///    val = obj->set(n, value, uncert);
	/// </pre></code>
	///
	///  @param [in]       n type <b>int</b> <i></i>   element position
	///  @param [in]       value type <b>double</b> <i></i>   value to set
	///  @param [in]       uncertainty type <b>double</b> <i></i>   uncertainty to set
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool set(int n, double value, double uncertainty);

	///////////////////////////////////////////////////////////////////////////////
	///  public virtual overloaded constant  equals
	///  The <b>equals</b> method tests if two objects are equal
	///  
	/// <code><pre>
	///    val = obj->equals(obj);
	/// </pre></code>
	///
	///  @param [in]       o type <b>const Object *</b> <i></i>   object to test
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool equals(const Object* o) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constant  equals
	///  The <b>equals</b> method tests if two objects are equal
	///  
	/// <code><pre>
	///    val = obj->equals(point);
	/// </pre></code>
	///
	///  @param [in]       p type <b>const CMPoint &</b> <i></i>   point to test
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool equals(const CMPoint& p) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constant  equals
	///  The <b>equals</b> method tests if two objects are equal
	///  
	/// <code><pre>
	///    val = obj->equals(point);
	/// </pre></code>
	///
	///  @param [in]       p type <b>const CMPoint *</b> <i></i>   point to test
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool equals(const CMPoint* p) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded  hasChangedSince
	///  The <b>hasChangedSince</b> method tests if a point has changed
	///  
	/// <code><pre>
	///    val = obj->hasChangedSince(point);
	/// </pre></code>
	///
	///  @param [in]       p type <b>const CMPoint &</b> <i></i>   point to test
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool hasChangedSince(const CMPoint& p);
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded  hasChangedSince
	///  The <b>hasChangedSince</b> method tests if a point has changed
	///  
	/// <code><pre>
	///    val = obj->hasChangedSince(point);
	/// </pre></code>
	///
	///  @param [in]       p type <b>const CMPoint *</b> <i></i>   point to test
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool hasChangedSince(const CMPoint* p);
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded  addDifference
	///  The <b>addDifference</b> method updates a point with a point update
	///  
	/// <code><pre>
	///    val = obj->addDifference(update);
	/// </pre></code>
	///
	///  @param [in]       p type <b>const CMPoint &</b> <i></i>   point update
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool addDifference(const CMPoint& p);
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded  addDifference
	///  The <b>addDifference</b> method updates a point with a point update
	///  
	/// <code><pre>
	///    val = obj->addDifference(point);
	/// </pre></code>
	///
	///  @param [in]       p type <b>const CMPoint *</b> <i></i>   point update
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool addDifference(const CMPoint* p);

	double x, y, z, w;
	double xUncertainty, yUncertainty, zUncertainty, wUncertainty;
	///////////////////////////////////////////////////////////////////////////////
	///  JString units
	///  The <b>units</b> variable units in clear text
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString units;
	///////////////////////////////////////////////////////////////////////////////
	///  JString coordinateSystem
	///  The <b>coordinateSystem</b> variable name of the coordinate system
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString coordinateSystem;
};


class CMObject;

class CMPose : public Object {
public:
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMPose
	///  The <b>CMPose</b> method constructs a CMPose object
	///  
	/// <code><pre>
	///    new CMPose();
	/// </pre></code>
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMPose();
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMPose
	///  The <b>CMPose</b> method constructs a new CMPose from raw XML
	///  
	/// <code><pre>
	///    new CMPose(xml);
	/// </pre></code>
	///
	///  @param [in]       xml type <b>const JString &</b> <i></i>   raw XML
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMPose(const JString& xml);
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMPose
	///  The <b>CMPose</b> method constructs a new CMPose from an XML Node
	///  
	/// <code><pre>
	///    new CMPose(node);
	/// </pre></code>
	///
	///  @param [in, out]  node type <b>XMLNode *</b> <i></i>   Node containing XML
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMPose(XMLNode* node);
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual destructor  ~CMPose
	///  The <b>~CMPose</b> method destroys a CMPose object
	///  
	/// <code><pre>
	///    delete(obj);
	/// </pre></code>
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	~CMPose();

	///////////////////////////////////////////////////////////////////////////////
	///  public virtual constant  clone
	///  The <b>clone</b> method creates an identical copy of the object
	///  
	/// <code><pre>
	///    val = (CMPose*) obj->clone();
	/// </pre></code>
	///
	///  @return <ul><li><b>Object *</b> containing <b>object</b> if successful, or</li>
	///                                       <li><b>NULL</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	Object* clone() const;
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual overloaded  fromXML
	///  The <b>fromXML</b> method fills in the object with the content of the XML
	///  
	/// <code><pre>
	///    val = obj->fromXML(xml);
	/// </pre></code>
	///
	///  @param [in]       xml type <b>const JString &</b> <i></i>   raw XML
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool fromXML(const JString& xml);
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual overloaded  fromXML
	///  The <b>fromXML</b> method fills in the object with the content of the XML Node
	///  
	/// <code><pre>
	///    val = obj->fromXML(node);
	/// </pre></code>
	///
	///  @param [in, out]  node type <b>XMLNode *</b> <i></i>   XML Node containing XML
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool fromXML(XMLNode* node);
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  toXML
	///  The <b>toXML</b> method creates XML that represents the full object content
	///  
	/// <code><pre>
	///    val = obj->toXML();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>XML</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString toXML();
	///////////////////////////////////////////////////////////////////////////////
	///  public constant  print
	///  The <b>print</b> method creates a string representation of the object
	///  
	/// <code><pre>
	///    val = obj->print();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>text</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	JString print();
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  toHTML
	///  The <b>toHTML</b> method creates HTML which represents the object
	///  
	/// <code><pre>
	///    val = obj->toHTML();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>HTML string</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	JString toHTML();

	///////////////////////////////////////////////////////////////////////////////
	///  JString id
	///  The <b>id</b> variable contains the ID
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString id;
	///////////////////////////////////////////////////////////////////////////////
	///  JString type
	///  The <b>type</b> variable contains the type
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString type;
	///////////////////////////////////////////////////////////////////////////////
	///  CMObject * parent
	///  The <b>parent</b> variable contains a pointer to the parent object
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMObject* parent;
	///////////////////////////////////////////////////////////////////////////////
	///  Box boundingbox
	///  The <b>boundingbox</b> variable contains the bounding box of the object
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	Box boundingbox;
	///////////////////////////////////////////////////////////////////////////////
	///  PointFloat gazedirection
	///  The <b>gazedirection</b> variable contains the gaze direction of the object
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	PointFloat gazedirection;
	// hierarchical pose tree
	// face
};

class CMManipulator : public Object {
public:
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMManipulator
	///  The <b>CMManipulator</b> method constructs a default manipulator
	///  
	/// <code><pre>
	///    new CMManipulator();
	/// </pre></code>
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMManipulator();
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMManipulator
	///  The <b>CMManipulator</b> method creates a manipulator from raw XML
	///  
	/// <code><pre>
	///    new CMManipulator(xml);
	/// </pre></code>
	///
	///  @param [in]       xml type <b>const JString &</b> <i></i>   raw XML
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMManipulator(const JString& xml);
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMManipulator
	///  The <b>CMManipulator</b> method creates a manipulator from an XML Node
	///  
	/// <code><pre>
	///    new CMManipulator(node);
	/// </pre></code>
	///
	///  @param [in, out]  node type <b>XMLNode *</b> <i></i>   XML Node containing XML
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMManipulator(XMLNode* node);
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual destructor  ~CMManipulator
	///  
	/// <code><pre>
	///    delete(obj);
	/// </pre></code>
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	~CMManipulator();
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual constant  clone
	///  The <b>clone</b> method creates an identical object by cloning
	///  
	/// <code><pre>
	///    val = (CMManipulator*) obj->clone();
	/// </pre></code>
	///
	///  @return <ul><li><b>Object *</b> containing <b>object</b> if successful, or</li>
	///                                       <li><b>NULL</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	Object* clone() const;
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual overloaded  fromXML
	///  The <b>fromXML</b> method fills in the object with the content of the XML
	///  
	/// <code><pre>
	///    val = obj->fromXML(xml);
	/// </pre></code>
	///
	///  @param [in]       xml type <b>const JString &</b> <i></i>   raw XML
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	bool fromXML(const JString& xml);
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  fromXML
	///  The <b>fromXML</b> method instantiates the object from XML
	///  
	/// <code><pre>
	///    val = obj->fromXML(xmlnode);
	/// </pre></code>
	///
	///  @param [in, out]  node type <b>XMLNode *</b> <i></i>   XMLNode containing XML
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	bool fromXML(XMLNode* node);
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  toXML
	///  The <b>toXML</b> method generates the XML representing the object
	///  
	/// <code><pre>
	///    val = obj->toXML();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>XML</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	JString toXML();
	///////////////////////////////////////////////////////////////////////////////
	///  public constant  print
	///  The <b>print</b> method creates a string representation of the object
	///  
	/// <code><pre>
	///    val = obj->print();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>text</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	JString print();
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  toHTML
	///  The <b>toHTML</b> method creates HTML which represents the object
	///  
	/// <code><pre>
	///    val = obj->toHTML();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>HTML string</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	JString toHTML();

	///////////////////////////////////////////////////////////////////////////////
	///  JString id
	///  The <b>id</b> variable contains the ID
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString id;
	///////////////////////////////////////////////////////////////////////////////
	///  JString type
	///  The <b>type</b> variable contains the type
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString type;
	///////////////////////////////////////////////////////////////////////////////
	///  CMObject * parent
	///  The <b>parent</b> variable contains a pointer to the parent object
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMObject* parent;
	///////////////////////////////////////////////////////////////////////////////
	///  Box boundingbox
	///  The <b>boundingbox</b> variable contains the bounding box of the manipulator
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	Box boundingbox;
	///////////////////////////////////////////////////////////////////////////////
	///  double open
	///  The <b>open</b> variable provides a measurement of how open the manipulator is
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	double open;
	///////////////////////////////////////////////////////////////////////////////
	///  CMPose pose
	///  The <b>pose</b> variable contains the pose of the object
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMPose pose;
};



class CMObject : public Object {
public:
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMObject
	///  The <b>CMObject</b> method creates a new CMObject
	///  
	/// <code><pre>
	///    new CMObject();
	/// </pre></code>
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMObject();
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMObject
	///  The <b>CMObject</b> method creates a new CMObject from raw XML
	///  
	/// <code><pre>
	///    new CMObject(xml);
	/// </pre></code>
	///
	///  @param [in]       xml type <b>const JString &</b> <i></i>   raw XML text
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMObject(const JString& xml);
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMObject
	///  The <b>CMObject</b> method creates a new CMObject from an XML Node
	///  
	/// <code><pre>
	///    new CMObject(node);
	/// </pre></code>
	///
	///  @param [in, out]  node type <b>XMLNode *</b> <i></i>   XML Node containing XML
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMObject(XMLNode* node);
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual destructor  ~CMObject
	///  The <b>~CMObject</b> method destroys a CMObject
	///  
	/// <code><pre>
	///    delete(obj);
	/// </pre></code>
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	~CMObject();
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual constant  clone
	///  The <b>clone</b> method creates an identical object by cloning
	///  
	/// <code><pre>
	///    val = (CMObject*) obj->clone();
	/// </pre></code>
	///
	///  @return <ul><li><b>Object *</b> containing <b>object</b> if successful, or</li>
	///                                       <li><b>NULL</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	Object* clone() const;
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual overloaded constant  equals
	///  The <b>equals</b> method tests if two objects are equal
	///  
	/// <code><pre>
	///    val = obj->equals(obj);
	/// </pre></code>
	///
	///  @param [in]       o type <b>const Object *</b> <i></i>   object to test
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	bool equals(const Object* o) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual overloaded constant  equals
	///  The <b>equals</b> method tests if two objects are equal
	///  
	/// <code><pre>
	///    val = obj->equals(obj);
	/// </pre></code>
	///
	///  @param [in]       o type <b>const CMObject &</b> <i></i>   object to test
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	bool equals(const CMObject& p) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual overloaded constant  equals
	///  The <b>equals</b> method tests if two objects are equal
	///  
	/// <code><pre>
	///    val = obj->equals(obj);
	/// </pre></code>
	///
	///  @param [in]       o type <b>const CMObject *</b> <i></i>   object to test
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	bool equals(const CMObject* p) const;
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual overloaded  fromXML
	///  The <b>fromXML</b> method fills in the object with the content of the XML
	///  
	/// <code><pre>
	///    val = obj->fromXML(xml);
	/// </pre></code>
	///
	///  @param [in]       xml type <b>const JString &</b> <i></i>   raw XML
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	bool fromXML(const JString& xml);
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  fromXML
	///  The <b>fromXML</b> method instantiates the object from XML
	///  
	/// <code><pre>
	///    val = obj->fromXML(xmlnode);
	/// </pre></code>
	///
	///  @param [in, out]  node type <b>XMLNode *</b> <i></i>   XMLNode containing XML
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	bool fromXML(XMLNode* node);
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  toXML
	///  The <b>toXML</b> method generates the XML representing the object
	///  
	/// <code><pre>
	///    val = obj->toXML();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>XML</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	JString toXML();
	///////////////////////////////////////////////////////////////////////////////
	///  public constant  print
	///  The <b>print</b> method creates a string representation of the object
	///  
	/// <code><pre>
	///    val = obj->print();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>text</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	JString print();
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  toHTML
	///  The <b>toHTML</b> method creates HTML which represents the object
	///  
	/// <code><pre>
	///    val = obj->toHTML();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>HTML string</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	JString toHTML();
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  unitTest
	///  The <b>unitTest</b> method runs the object's unit tests
	///  
	/// <code><pre>
	///    val = obj->unitTest();
	/// </pre></code>
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool unitTest();

	///////////////////////////////////////////////////////////////////////////////
	///  public  operator -
	///  The <b>operator -</b> method returns the difference between two CMObjects
	///  
	/// <code><pre>
	///    val = obj - obj2;
	/// </pre></code>
	///
	///  @param [in, out]  otherObject type <b>CMObject *</b> <i></i>   CMObject to compare with
	///
	///  @return <ul><li><b>CMObject *</b> containing <b>the difference object</b> if successful, or</li>
	///                                       <li><b>NULL</b> if no difference.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMObject* operator-(CMObject* otherObject);
	///////////////////////////////////////////////////////////////////////////////
	///  public  operator +=
	///  The <b>operator +=</b> method adds the information from another CMObject
	///  
	/// <code><pre>
	///    val += obj;
	/// </pre></code>
	///
	///  @param [in, out]  otherObject type <b>CMObject *</b> <i></i>   CMObject to add
	///
	///  @return <ul><li><b>const CMObject &</b> containing <b>self</b> if successful, or</li>
	///                                       <li><b>unmodified self</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	const CMObject& operator+=(CMObject* otherObject);
	///////////////////////////////////////////////////////////////////////////////
	///  public  getDifferenceSince
	///  The <b>getDifferenceSince</b> method returns the difference between the two objects
	///  
	/// <code><pre>
	///    val = obj->getDifferenceSince(obj);
	/// </pre></code>
	///
	///  @param [in, out]  otherObject type <b>CMObject *</b> <i></i>   CMObject to compare with
	///
	///  @return <ul><li><b>CMObject *</b> containing <b>difference object</b></li>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMObject* getDifferenceSince(CMObject* otherObject);
	///////////////////////////////////////////////////////////////////////////////
	///  public  getDifferenceSinceIfAny
	///  The <b>getDifferenceSinceIfAny</b> method returns the difference between the two objects
	///  or NULL if there are no difference
	///  
	/// <code><pre>
	///    val = obj->getDifferenceSinceIfAny(obj);
	/// </pre></code>
	///
	///  @param [in, out]  otherObject type <b>CMObject *</b> <i></i>   CMObject to compare with
	///
	///  @return <ul><li><b>CMObject *</b> containing <b>difference object</b> if successful, or</li>
	///                                       <li><b>NULL</b> if no difference.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMObject* getDifferenceSinceIfAny(CMObject* otherObject);
	///////////////////////////////////////////////////////////////////////////////
	///  public  addDifference
	///  The <b>addDifference</b> method add the values from a CMObject update
	///  
	/// <code><pre>
	///    val = obj->addDifference(obj);
	/// </pre></code>
	///
	///  @param [in, out]  otherObject type <b>CMObject *</b> <i></i>   CMObject with values to add
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool addDifference(CMObject* otherObject);

	///////////////////////////////////////////////////////////////////////////////
	///  public  hasProperty
	///  The <b>hasProperty</b> method checks if a property exists
	///  
	/// <code><pre>
	///    val = obj->hasProperty(name);
	/// </pre></code>
	///
	///  @param [in]       name type <b>const JString &</b> <i></i>   name of property to check
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if property exists, or</li>
	///                                       <li><b>false</b> if not.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool hasProperty(const JString& name);
	///////////////////////////////////////////////////////////////////////////////
	///  public  getPropertyType
	///  The <b>getPropertyType</b> method returns the type name of a property
	///  
	/// <code><pre>
	///    val = obj->getPropertyType(name);
	/// </pre></code>
	///
	///  @param [in]       name type <b>const JString &</b> <i></i>   name of property to check
	///
	///  @return <ul><li><b>JString</b> containing <b>type string</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString getPropertyType(const JString& name);
	///////////////////////////////////////////////////////////////////////////////
	///  public  removeProperty
	///  The <b>removeProperty</b> method removes a stored named property
	///  
	/// <code><pre>
	///    val = obj->removeProperty(name);
	/// </pre></code>
	///
	///  @param [in]       name type <b>const JString &</b> <i></i>   property name
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool removeProperty(const JString& name);

	///////////////////////////////////////////////////////////////////////////////
	///  public  getPropertyString
	///  The <b>getPropertyString</b> method returns the property content as a string
	///  
	/// <code><pre>
	///    val = obj->getPropertyString(name);
	/// </pre></code>
	///
	///  @param [in]       name type <b>const JString &</b> <i></i>   name of property
	///
	///  @return <ul><li><b>JString</b> containing <b>content</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString getPropertyString(const JString& name);
	///////////////////////////////////////////////////////////////////////////////
	///  public  getPropertyInteger
	///  The <b>getPropertyInteger</b> method returns the property content as an integer
	///  
	/// <code><pre>
	///    val = obj->getPropertyInteger(name);
	/// </pre></code>
	///
	///  @param [in]       name type <b>const JString &</b> <i></i>   name of property
	///
	///  @return <ul><li><b>int</b> containing <b>value</b> if successful, or</li>
	///                                       <li><b>0</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	int getPropertyInteger(const JString& name);
	///////////////////////////////////////////////////////////////////////////////
	///  public  getPropertyDouble
	///  The <b>getPropertyDouble</b> method returns the property content as a double value
	///  
	/// <code><pre>
	///    val = obj->getPropertyDouble(name);
	/// </pre></code>
	///
	///  @param [in]       name type <b>const JString &</b> <i></i>   property name
	///
	///  @return <ul><li><b>double</b> containing <b>value</b> if successful, or</li>
	///                                       <li><b>0</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	double getPropertyDouble(const JString& name);
	///////////////////////////////////////////////////////////////////////////////
	///  public  getPropertyObject
	///  The <b>getPropertyObject</b> method returns the property content as an object
	///  
	/// <code><pre>
	///    val = obj->getPropertyObject(name);
	/// </pre></code>
	///
	///  @param [in]       name type <b>const JString &</b> <i></i>   property name
	///
	///  @return <ul><li><b>Object *</b> containing <b>the object</b> if successful, or</li>
	///                                       <li><b>NULL</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	Object* getPropertyObject(const JString& name);

	///////////////////////////////////////////////////////////////////////////////
	///  public  get
	///  The <b>get</b> method get a property by name
	///  
	/// <code><pre>
	///    val = obj->get(name);
	/// </pre></code>
	///
	///  @param [in]       prop type <b>const JString &</b> <i></i>   property name
	///
	///  @return <ul><li><b>JString</b> containing <b>property value</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString get(const JString& prop);

	///////////////////////////////////////////////////////////////////////////////
	///  public  setPropertyString
	///  The <b>setPropertyString</b> method set the named property
	///  
	/// <code><pre>
	///    val = obj->setPropertyString(name, value);
	/// </pre></code>
	///
	///  @param [in]       name type <b>const JString &</b> <i></i>   property name
	///  @param [in]       value type <b>const JString &</b> <i></i>   new property value
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool setPropertyString(const JString& name, const JString& value);
	///////////////////////////////////////////////////////////////////////////////
	///  public  setPropertyInteger
	///  The <b>setPropertyInteger</b> method sets the named property
	///  
	/// <code><pre>
	///    val = obj->setPropertyInteger(name, value);
	/// </pre></code>
	///
	///  @param [in]       name type <b>const JString &</b> <i></i>   property name
	///  @param [in]       value type <b>int</b> <i></i>   new property value
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool setPropertyInteger(const JString& name, int value);
	///////////////////////////////////////////////////////////////////////////////
	///  public  setPropertyDouble
	///  The <b>setPropertyDouble</b> method sets a named property
	///  
	/// <code><pre>
	///    val = obj->setPropertyDouble(name, value);
	/// </pre></code>
	///
	///  @param [in]       name type <b>const JString &</b> <i></i>   property name
	///  @param [in]       value type <b>double</b> <i></i>   new property value
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool setPropertyDouble(const JString& name, double value);
	///////////////////////////////////////////////////////////////////////////////
	///  public  setPropertyObject
	///  The <b>setPropertyObject</b> method sets a named property
	///  
	/// <code><pre>
	///    val = obj->setPropertyObject(name, object, type);
	/// </pre></code>
	///
	///  @param [in]       name type <b>const JString &</b> <i></i>   property name
	///  @param [in, out]  value type <b>Object *</b> <i></i>   property value as object
	///  @param [in]       type type <b>const JString &</b> <i></i>   object type string
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	bool setPropertyObject(const JString& name, Object* value, const JString& type);

	///////////////////////////////////////////////////////////////////////////////
	///  JString id
	///  The <b>id</b> variable contains the id of the object
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString id;
	///////////////////////////////////////////////////////////////////////////////
	///  JString type
	///  The <b>type</b> variable contains the type of the object
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString type;
	JString parentID;
	///////////////////////////////////////////////////////////////////////////////
	///  CMObject * parent
	///  The <b>parent</b> variable contains the pointer to the parent object
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMObject* parent;
	///////////////////////////////////////////////////////////////////////////////
	///  ObjectDictionary children
	///  The <b>children</b> variable contains the list of child CMObjects
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	ObjectDictionary children;
	///////////////////////////////////////////////////////////////////////////////
	///  ObjectDictionary properties
	///  The <b>properties</b> variable contains a list of properties
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	ObjectDictionary properties;
	///////////////////////////////////////////////////////////////////////////////
	///  Dictionary propertyTypes
	///  The <b>propertyTypes</b> variable contains a dictionary of property names and types
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	Dictionary propertyTypes;

	///////////////////////////////////////////////////////////////////////////////
	///  CMPoint pos
	///  The <b>pos</b> variable contains the position of the object
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMPoint pos;
	CMMeasurement oriX, oriY, oriZ, oriW;
	CMMeasurement velX, velY, velZ;
	CMMeasurement boxW, boxH, boxD;
	///////////////////////////////////////////////////////////////////////////////
	///  JTime createdTime
	///  The <b>createdTime</b> variable contains the time of creation
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JTime createdTime;

	// physical properties
	// color
	// texture
	// geometry
};

class CMMap : public Object {
public:
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMMap
	///  The <b>CMMap</b> method creates a CMMap with default values
	///  
	/// <code><pre>
	///    new CMMap();
	/// </pre></code>
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMMap();
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMMap
	///  The <b>CMMap</b> method creates a new CMMap from raw XML
	///  
	/// <code><pre>
	///    new CMMap(xml);
	/// </pre></code>
	///
	///  @param [in]       xml type <b>const JString &</b> <i></i>   raw XML
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMMap(const JString& xml);
	///////////////////////////////////////////////////////////////////////////////
	///  public overloaded constructor  CMMap
	///  The <b>CMMap</b> method creates a new CMMap from an XML Node
	///  
	/// <code><pre>
	///    new CMMap(node);
	/// </pre></code>
	///
	///  @param [in, out]  node type <b>XMLNode *</b> <i></i>   XML Node containing XML
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMMap(XMLNode* node);
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual destructor  ~CMMap
	///  The <b>~CMMap</b> method destroys a CMMap object
	///  
	/// <code><pre>
	///    delete(obj);
	/// </pre></code>
	///
	///  This function doesn't return a value
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	~CMMap();
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual constant  clone
	///  The <b>clone</b> method creates an identical object by cloning
	///  
	/// <code><pre>
	///    val = (CMMap*) obj->clone();
	/// </pre></code>
	///
	///  @return <ul><li><b>Object *</b> containing <b>object</b> if successful, or</li>
	///                                       <li><b>NULL</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	Object* clone() const;
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual overloaded  fromXML
	///  The <b>fromXML</b> method fills in the object with the content of the XML
	///  
	/// <code><pre>
	///    val = obj->fromXML(xml);
	/// </pre></code>
	///
	///  @param [in]       xml type <b>const JString &</b> <i></i>   raw XML
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	bool fromXML(const JString& xml);
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  fromXML
	///  The <b>fromXML</b> method instantiates the object from XML
	///  
	/// <code><pre>
	///    val = obj->fromXML(xmlnode);
	/// </pre></code>
	///
	///  @param [in, out]  node type <b>XMLNode *</b> <i></i>   XMLNode containing XML
	///
	///  @return <ul><li><b>bool</b> containing <b>true</b> if successful, or</li>
	///                                       <li><b>false</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	bool fromXML(XMLNode* node);
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  toXML
	///  The <b>toXML</b> method generates the XML representing the object
	///  
	/// <code><pre>
	///    val = obj->toXML();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>XML</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	JString toXML();
	///////////////////////////////////////////////////////////////////////////////
	///  public constant  print
	///  The <b>print</b> method creates a string representation of the object
	///  
	/// <code><pre>
	///    val = obj->print();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>text</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	JString print();
	///////////////////////////////////////////////////////////////////////////////
	///  public virtual  toHTML
	///  The <b>toHTML</b> method creates HTML which represents the object
	///  
	/// <code><pre>
	///    val = obj->toHTML();
	/// </pre></code>
	///
	///  @return <ul><li><b>JString</b> containing <b>HTML string</b> if successful, or</li>
	///                                       <li><b>empty string</b> if unsuccessful.</li></ul>
	///
	///  @remarks 
	///
	///  @see 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	JString toHTML();

	///////////////////////////////////////////////////////////////////////////////
	///  JString id
	///  The <b>id</b> variable contains the id
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString id;
	///////////////////////////////////////////////////////////////////////////////
	///  JString type
	///  The <b>type</b> variable contains type
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString type;
	///////////////////////////////////////////////////////////////////////////////
	///  JString parentID
	///  The <b>parentID</b> variable contains id of the parent object
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	JString parentID;
	///////////////////////////////////////////////////////////////////////////////
	///  CMObject * parent
	///  The <b>parent</b> variable contains the pointer to the parent object
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	CMObject* parent;
	///////////////////////////////////////////////////////////////////////////////
	///  ObjectDictionary children
	///  The <b>children</b> variable contains the list of children objects
	///
	///  @remarks 
	///
	///  @author Thor List @date 18-05-2007
	///////////////////////////////////////////////////////////////////////////////
	/////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
	ObjectDictionary children;

};

CMObject* CMObjectFromObject(Object* obj);
CMMap* CMMapFromObject(Object* obj);

} // namespace cmlabs

#endif // _COGMAPOBJECTS_H_

