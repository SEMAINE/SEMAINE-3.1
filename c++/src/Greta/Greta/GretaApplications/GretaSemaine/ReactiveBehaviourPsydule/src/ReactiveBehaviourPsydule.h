//Copyright 1999-2008 Catherine Pelachaud - c.pelachaud@iut.univ-paris8.fr
//
//This file is part of Greta.
//
//Greta is free software; you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation; either version 2 of the License, or
//(at your option) any later version.
//
//Greta is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with Greta; if not, write to the Free Software
//Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


// ReactiveBehaviourPsydule.h: interface for the ReactiveBehaviourPsydule class.
//
//////////////////////////////////////////////////////////////////////
#pragma once

#include <conio.h>
#include <stdio.h>
#include <iostream>
#include <utility>
#include <map>
#include "DataContainer.h"
#include "Psydule.h"
#include "CentralClock.h"
#include "../../../include/Common/definitions.h"
#include "AgentState.h"
#include "ReactiveBehaviourTrigger.h"
#include "BehaviourSelector.h"
#include "listener/ListenerData.h"
#include "DataBackchannel.h"

/**
 *  Contains informations on the ReactiveBehaviourPsydule class
 *  @author Elisabetta Bevacqua elisabetta.bevacqua@libero.it
 *  @date 2008
 */
class ReactiveBehaviourPsydule  
{
public:
	/** 
    * Class contructor.
    * 
    */
	ReactiveBehaviourPsydule();
	/** 
    * Class default destructor.
    * 
    */
	~ReactiveBehaviourPsydule();

	/** 
    * Initialize Psyclone Connection 
    *
    */
	int initPsycloneConnection();

	/** 
    * Receive input from the GretaName.Whiteboard
    * 
    */
	int ReactiveBehaviourPsydule::ReadMessage(Message *msg);
	/** 
    * Receive input from the InputData.Whiteboard
	* input data about the event generated by a user
    * 
    */
	int ReactiveBehaviourPsydule::ReadInputMessages();

	/** 
    * Send BML, FML or variation on the user level of interest
    * 
    */
	void ReactiveBehaviourPsydule::SendBehaviour(std::string bmlfml, JString messagetype);

	/** 
    * Contains info about the agent's state
    * 
    */
	AgentState *agentstate;

	/** 
    * Selector, it selects the backchannel that the agent must performs
    * 
    */
	BehaviourSelector *behaviourselector;
	/** 
    * Get Greta's name
    * 
    */
	JString getGretaName();


private:
	/** 
    * The psyclone module adress and the Greta's Name
    * 
    */
	JString psyduleHost, GretaName;	
	/** 
    * The psyclone module port
    * 
    */
	int psydulePort;
	/** 
    * The Psydule Greta interface
    * 
    */
	Psydule *psydule;

	/** 
    * Contains info about the listener: analysis rules, backchannel rules, internal state
    * 
    */
	ListenerData *listenerdata;
	/** 
    * The *UNIQUE* Psydule InputData interface for all the Reactive Gretas
    * 
    */
	Psydule *psyduleInput;
	/** 
    * Trigger for mimicry and reactive backchannel
    * 
    */
	ReactiveBehaviourTrigger *reactivebehaviourtrigger;

	
};