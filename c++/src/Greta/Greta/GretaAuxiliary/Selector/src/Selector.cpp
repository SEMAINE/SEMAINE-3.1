//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Selector.cpp
//  @ Date : 22/07/2008
//  @ Author : 
//
//

#include <vector>

#include "Selector.h"

Selector::Selector() {

}

Selector::Selector(std::string name, CentralClock *pc) 
{
	printf("Selector Constructor!\n");
	num_of_elements = 0;
	this->pc=pc;
	this->name=name;
}

Selector::~Selector() 
{
}

void Selector::SetPercentage(float per)
{
	percentageVec.push_back(per);
}


//void Selector::addElement(std::string name, std::vector<AgentBehaviour> *inQueuePtr, int inTime )
void Selector::addElement(std::string name, AgentBehaviour *lastEvent, int inTime )
{

	selectorElement *theElement=new selectorElement();

	theElement->name=name;
	theElement->frequency=inTime;
	theElement->readTime=pc->GetTime();
	//theElement->queue = inQueuePtr;
	theElement->lastEvent = lastEvent;
	theElement->selector = 0;

	element.push_back(theElement);
	num_of_elements++;
	
}

void Selector::addElement(Selector *inSelectorPtr, int inTime ) {
	
    selectorElement* theElement=new selectorElement();
	
	theElement->name=inSelectorPtr->name;
	theElement->frequency=inTime;
	theElement->readTime=pc->GetTime();
	theElement->selector = inSelectorPtr;
	//theElement->queue = 0;
	theElement->lastEvent = NULL;
	
	element.push_back(theElement);
	num_of_elements++;
}


void Selector::showSelectorScheme() {
	
	for ( int i=0; i<element.size(); i++ ) {
		
		//if  ( element.at(i)->queue != 0  )
		if(element[i]->lastEvent!=NULL ) 
		{
			printf("SP%d \n",i);
			printf("\n");
		}
		else {
			printf("Selector%d \n",i);
			element[i]->selector->showSelectorScheme();
			printf("\n");
		}
	}
	
}

std::string Selector::retrieveSignal() {
	//printf("\n\n Selector::retrieveSignal \n\n");
	return "";
}
