//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Selector.h
//  @ Date : 22/07/2008
//  @ Author : 
//
//





#if !defined(_SELECTOR_H)
#define _SELECTOR_H

#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "AgentBehaviour.h"
#include "CentralClock.h"


class selectorElement;


class Selector {
public:
	std::string name;
	std::vector<selectorElement*> element;
	int num_of_elements;
	CentralClock *pc;
	std::vector<float> percentageVec; 
public:
	Selector();
	Selector(std::string name, CentralClock *pc);
	virtual ~Selector();
	//void addElement(std::string name, std::vector<AgentBehaviour> *inQueuePtr, int inTime);
	void addElement(std::string name, AgentBehaviour *lastEvent, int inTime);
	void addElement(Selector *Selector, int inTime);
	virtual std::string retrieveSignal();
	void Selector::showSelectorScheme();
	void Selector::SetPercentage(float per);
};

class selectorElement {
	public:
		selectorElement(){}
		virtual ~selectorElement(){}
		void selectorElement::resetReadTime(){readTime=0;}
		//std::vector<AgentBehaviour> *queue;
		AgentBehaviour *lastEvent;
		Selector *selector;
		std::string name;

		int frequency;
		int readTime;
		bool ready;
		
		bool operator==(selectorElement& c){
			if((this->selector==c.selector) && (this->lastEvent==c.lastEvent))
				return true;
			else return false;
		}
};

#endif  //_SELECTOR_H
