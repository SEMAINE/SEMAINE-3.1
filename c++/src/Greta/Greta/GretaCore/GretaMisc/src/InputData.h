//Copyright 1999-2008 Catherine Pelachaud - c.pelachaud@iut.univ-paris8.fr
//
//This file is part of Greta.
//
//Greta is free software; you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation; either version 2 of the License, or
//(at your option) any later version.
//
//Greta is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with Greta; if not, write to the Free Software
//Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#pragma once

#include <string>
#include <map>
#include <list>

/**
 *  Contains informations on an InputData.
 *  Each event generated by a user can cause a reaction by the agent
 *  This class contains the information about the external events
 *  @author Elisabetta Bevacqua elisabetta.bevacqua@libero.it
 *  @date 2008
 */
class InputData
{
public:

	/** 
     * Class default contructor.
     * 
     */
	InputData::InputData();
	/** 
     * Class contructor.
	 * @param modality the modality on which the event
	 * has been generated (head, face, gaze, torso, gesture)
	 * @param name the name of the event
     */
	InputData::InputData(std::string modality, std::string name);
	/** 
     * Class destructor.
     * 
     */
	~InputData(void);
	 /**
	* Add input data of an external event
	* each data about an event is described by the couple NAME:VALUE;
	* @param name the name of the data
	* @param value the value of the data
	*/
	void InputData::AddParameter(std::string name, std::string value);
	/**
	* Set the event priority
	* @param priority the priority of the event
	*/
	void InputData::setPriority(int priority) {this->priority=priority;}
	/**
	* Get the event priority
	* @return the event priority
	*/
	int InputData::getPriority() {return this->priority;}
	/**
	* Set the event probability
	* @param probability the probability that an event generates a backchannel
	*/
	void InputData::setProbability(float probability) {this->probability=probability;}
	/**
	* Get the event probability
	* @return the event probability
	*/
	float InputData::getProbability() {return this->probability;}
	/**
	* Set the event time
	* @param time the time of the perception of an event
	*/
	void InputData::SetTime(int time) {this->time=time;}

	/**
	* Rewrite a string in upper case
	* @param s the string to rewrite in upper case
	* @return the string rewritten in upper case 
	*/
	std::string InputData::ToUpper(std::string s);
	/**
	* Rewrite a string in lower case
	* @param s the string to rewrite in lower case
	* @return the string rewritten in lower case 
	*/
	std::string InputData::ToLower(std::string s);
	/**
	* Clean the object
	*/
	void InputData::CleanData();
	/**
	* Print the object, for debug purpose 
	*/
	void InputData::PrintData();
	
	/**
	* Time of the percepion of the event
	*/
	int time;
	/**
	* probability that an external event generates a reaction from the agent
	*/
	float probability;
	/**
	* priority of an event
	*/
	int priority;
	
	/** 
    * modality on which the event has been generated 
	* (head, face, gaze, torso, gesture)
	*/
	std::string modality;
	/**
	* name of an event
	*/
	std::string name;
	/**
	* for debugging purpose
	*/
	std::string zone;

	/**
	* rotation of the head for each axes (in radiants)
	*/
	float radiant_head_rotation[3];
	/**
	* translation of the head for each axes (in millimetres)
	*/
	float mm_head_translation[3];

	int triggerBC;

	/**
	* map of the event data
	* each data about an event is described by the couple NAME:VALUE;
	*/
	std::map<std::string, std::string> mapParameters;
};