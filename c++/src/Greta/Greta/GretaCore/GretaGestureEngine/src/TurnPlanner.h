//Copyright 1999-2008 Catherine Pelachaud - c.pelachaud@iut.univ-paris8.fr
//
//This file is part of Greta.
//
//Greta is free software; you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation; either version 2 of the License, or
//(at your option) any later version.
//
//Greta is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with Greta; if not, write to the Free Software
//Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

/// @file TurnPlanner.h
/// interface for the TurnPlanner class.
///
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_TURNPLANNER_H__E6002AE0_EE11_437D_8F42_ABE60B20FB91__INCLUDED_)
#define AFX_TURNPLANNER_H__E6002AE0_EE11_437D_8F42_ABE60B20FB91__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#pragma warning(disable:4786)
#pragma warning(disable:4305)

#include <vector>
#include <string>
#include "GestureEngineGlobals.h"
#include "BAPTypes.h"
#include "GesturePlanner.h"
#include "MotorPlanner.h"
#include "GestureTree.h"

/**@#-*/
namespace GestureSpace {
	/**@#+*/

	/**
	* TurnPlanner class: High-level planning and execution for one conversational turn.
	*
	* @see GesturePlanner
	* @see MotorPlanner
	* @author Bjoern Hartmann, bjoern@graphics.cis.upenn.edu 
	* @version 1.0
	*/
	class TurnPlanner  
	{
	public:

		/** 
		* To Access the MotorPlanner outside of the TurnPlanner
		*  
		* Used to access the MotorPlanner from outside the
		* TurnPlanner, for example to call the MotorPlanner's function
		* to write a BAP file. (for example in main.cpp:)
		* TP.GetMPlannerPtr()->WriteAnimation("e:\\bjoern\\bap_files\\anim0011.bap");		
		* @return a pointer to the MotorPlanner object. 
		*/
		MotorPlanner* GetMPlannerPtr();


		/** Calculate turn down to joint angles and store BAPframes in memory.*/
		void CalculateTurn(std::string turnsfilename);


		/** Constructor. No real work done here. */
		TurnPlanner();

		/** Destructor. No real work done here. */
		virtual ~TurnPlanner();

	private:
		int lastbeat;
		/** 
		* Hand-coded Request() statements are in here. Called by CalculateTurn().
		*
		* This method should be replaced w/ high-level request reasoning code. 
		* @see GesturePlanner::Request
		* @see GesturePlanner::RequestWithRepetition
		* @see #CalculateTurn
		*/
		void TurnTheTurn(std::string turnsfilename);

		/** 
		* OBSOLETE!
		*
		* Reads turn file generated by (*modified*) xml2fap and requests
		* gestures using GesturePlanner::Request 
		*/
		float ReadTurnFile(GestureTree* tree,char *turnsfilename);

		void TurnPlanner::PreVisit(GestureTree* t,char* tab);

		GestureTree* TurnPlanner::FindEmphasis(GestureTree* g);

		bool TurnPlanner::SearchForAdjectival(GestureTree* g);

		bool TurnPlanner::SearchForDeictic(GestureTree* g);

		bool TurnPlanner::SearchForBeliefRelation(GestureTree* g);

		bool TurnPlanner::SearchForAffect(GestureTree* g);

		bool TurnPlanner::SearchForSimpleEmphasis(GestureTree* g);

		bool TurnPlanner::SearchForTopicComment(GestureTree* g);

		bool TurnPlanner::inside(char* s1,char* s2);

		/** This is the TurnPlanner's MotorPlanner object */
		MotorPlanner	mMPlanner;

		/** This is the TurnPlanner's GesturePlanner object */
		GesturePlanner	mGPlanner;

		/** Debug output flag */
		bool			output;

	};

	/**@#-*/
} //END namespace GestureSpace
/**@#+*/

#endif // !defined(AFX_TURNPLANNER_H__E6002AE0_EE11_437D_8F42_ABE60B20FB91__INCLUDED_)
