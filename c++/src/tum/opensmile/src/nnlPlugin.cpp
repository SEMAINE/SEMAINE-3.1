/*F******************************************************************************
 *
 * openSMILE - open Speech and Music Interpretation by Large-space Extraction
 *       the open-source Munich Audio Feature Extraction Toolkit
 * Copyright (C) 2008-2009  Florian Eyben, Martin Woellmer, Bjoern Schuller
 *
 *
 * Institute for Human-Machine Communication
 * Technische Universitaet Muenchen (TUM)
 * D-80333 Munich, Germany
 *
 *
 * If you use openSMILE or any code from openSMILE in your research work,
 * you are kindly asked to acknowledge the use of openSMILE in your publications.
 * See the file CITING.txt for details.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 ******************************************************************************E*/


/*  openSMILE component:

example dataSink
writes data to data memory...

*/

#include <nnlPlugin.hpp>
#define MODULE "nnlPlugin"
#undef class

#ifdef HAVE_RTNNLLIB

#include <nn/engine/NetController.h>
#include <nn/netcdf/NetcdfDataset.h>
#include <smileCommon.hpp>
#include <smileComponent.hpp>
#include <stdio.h>

SMILECOMPONENT_STATICS(nnlPlugin)

SMILECOMPONENT_REGCOMP(nnlPlugin)
{
  SMILECOMPONENT_REGCOMP_INIT
  scname = COMPONENT_NAME_NNLSINK;
  sdescription = COMPONENT_DESCRIPTION_NNL;

  // we inherit cDataSink configType and extend it:
  SMILECOMPONENT_INHERIT_CONFIGTYPE("cDataSink")

  SMILECOMPONENT_IFNOTREGAGAIN(
	ct->setField("netconfigFile","net configuration: xml generated by nnl","");
    ct->setField("dataDimensionsFile","file with the data dimensions generated by DataDimensionsGen of rt_nnl","");
	ct->setField("standardizeFile","mean and variance of the test data to use for standardization of the input","");
	)
  SMILECOMPONENT_MAKEINFO(nnlPlugin);
}

SMILECOMPONENT_CREATE(nnlPlugin)

//-----

nnlPlugin::nnlPlugin(const char *_name) :
  cDataSink(_name)
{
	means = NULL;
	stddevs = NULL;
}

void nnlPlugin::fetchConfig()
{
	cDataSink::fetchConfig();
	SMILE_IMSG(3,"configuring nnlPlugin..\n");

	netconfigFile = getStr("netconfigFile");
	//printf("netconfigFile=%s\n",netconfigFilename);
	SMILE_IDBG(2,"netconfigFile = '%s'",netconfigFile);
	dataDimensionsFile = getStr("dataDimensionsFile");
	SMILE_IDBG(2,"dataDimensionsFile = '%s'",dataDimensionsFile);
	standardizeFile = getStr("standardizeFile");
	SMILE_IDBG(2,"standardizeFile = '%s'",standardizeFile);
}


/*
int nnlPlugin::myConfigureInstance()
{
	int ret=1;
	ret *= cDataSink::myConfigureInstance();


	return ret;
}
*/


int nnlPlugin::myFinaliseInstance()
{
  int ret=1;
  ret *= cDataSink::myFinaliseInstance();

  if (ret) {
    controller = new NetController();
    char* ddFile = new char[sizeof(dataDimensionsFile)];
    strcpy(ddFile,dataDimensionsFile);
    ((NetController*)controller)->init(netconfigFile,ddFile);
  }

  return ret;
}


int nnlPlugin::myTick(long long t){
	SMILE_DBG(4,"tick # %i, reading value vector:",t);
	//cVector *vec= reader->getNextFrame();
	cVector *vec= reader->getFrameRel(0);
	if (vec == NULL)
	  return 0;
	//else reader->nextFrame();

	float* standardizedInputs = new float[vec->N];

	std::string standardizeFileName(standardizeFile);
	if (!standardizeFileName.empty()){
		if (means==NULL){
			initStandardizationValues(vec->N);
		}

		//the input dimensions are not known at the time of the plugin initialization
		//unless we try to read the dataDims-File, but this is the responsibility of the nnl-core
		for (int i=0; i<vec->N; i++){
			standardizedInputs[i] = (vec->dataF[i] - means[i])/stddevs[i];
		}
	}else{
		standardizedInputs = vec->dataF;
	}

	string result = ((NetController*)controller)->recognize(standardizedInputs);
	if (!result.empty()){
		cout << result << " ";
        cout.flush();
	}

	 // tick success
	 return 1;
}

/** dim: input dimension*/
void nnlPlugin::initStandardizationValues(long dim)
{
  FILE *nd = fopen(standardizeFile,"rb");
  means = new double[dim];
  stddevs = new double[dim];
  if (nd != NULL) {
          fread(means, sizeof(double)*dim, 1, nd);
          fread(stddevs, sizeof(double)*dim, 1, nd);
          fclose(nd);
  }
}

nnlPlugin::~nnlPlugin(){
}

#endif //HAVE_RTNNLLIB

