/*
Voice activity detection (old version, half rule-based fuzzy logic, half data driven, self learning)
*/

;;;;; this list will be appended to the list in the main config file
[componentInstances:cComponentManager]

instance[turn].type=cTurnDetector
instance[vadRule].type=cVadV1
instance[vad].type=cSemaineSpeakerID1

;;; --- test
instance[frV].type=cFramer
instance[frV2].type=cFramer
instance[frV2w].type=cWindower
instance[enV].type=cEnergy
instance[fftV].type=cTransformFFT
instance[fftmV].type=cFFTmagphase
;instance[acfV].type=cAcf
;instance[cepV].type=cAcf
;instance[pitchV].type=cPitchACF
instance[mspecV].type=cMelspec
;instance[mfccV].type=cMfcc
;instance[mspecVz].type=cVecGlMean
instance[lpc].type=cLpc
instance[lsp].type=cLsp

////////////////////////////////////////////////////////////////////////////////////////////////
// ~~~~~~~~~ Begin of configuration ~~~~~~~~~~~~~~~~~ //////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////


[frV:cFramer]
reader.dmLevel=wave
writer.dmLevel=frV
;buffersize_sec=2.0
frameSize = 0.010
frameStep = 0.010

[frV2:cFramer]
reader.dmLevel=wave
writer.dmLevel=frV2
;buffersize_sec=2.0
frameSize = 0.032
frameStep = 0.010

[frV2w:cWindower]
reader.dmLevel=frV2
writer.dmLevel=frV2w
winFunc = ham
gain = 1.0

[enV:cEnergy]
reader.dmLevel=frV2w
writer.dmLevel=enV
nameAppend=energy
rms=1
log=1


[fftV:cTransformFFT]
reader.dmLevel=frV2w
writer.dmLevel=fftV

[fftmV:cFFTmagphase]
reader.dmLevel=fftV
writer.dmLevel=fftmV

[acfV:cAcf]
reader.dmLevel=fftmV
writer.dmLevel=acfV

[cepV:cAcf]
reader.dmLevel=fftmV
writer.dmLevel=cepV
cepstrum=1

[pitchV:cPitchACF]
  ; the pitchACF component must ALWAYS read from acf AND cepstrum in the given order!
reader.dmLevel=acfV;cepV
writer.dmLevel=f0raw
processArrayFields=0
F0=0
;F0raw=1
; note: when voice prob = 0, the processing hangs... TODO: why is this so?
voiceProb=1
HNR=0
F0env=0
voiceQual=0

[lpc:cLpc]
reader.dmLevel=frV
saveRefCoeff=0
writer.dmLevel=lpc
p=10

[mspecV:cMelspec]
reader.dmLevel=fftmV
writer.dmLevel=mspecV
htkcompatible = 0
usePower = 0
nBands = 14
lofreq = 50
hifreq = 4000

[mfccV:cMfcc]
reader.dmLevel=mspecV
writer.dmLevel=mfccV
;writer.levelconf.noHang=2
firstMfcc = 8
lastMfcc =  16
cepLifter = 22
htkcompatible = 1


[mspecVz:cVecGlMean]
reader.dmLevel=mspecV
writer.dmLevel=mspecVz
;htkcompatible = 1
fixedBuffer=10.0
updateMethod=fix
invertTurn=1
turnOnlyUpdate=0
;initFile=atk/cepmean


[lsp:cLsp]
reader.dmLevel=lpc
writer.dmLevel=lsp


//////////////////////////////////


[vadRule:cVadV1]
;reader.dmLevel=lsp;f0raw;enV
reader.dmLevel=mspecV;lsp;enV
writer.dmLevel=vad11
writer.levelconf.noHang=1
debug=\cm[vaddebug{0}:1=debug vad]
threshold=\cm[threshold{-13}:VAD threshold]
disableDynamicVAD=\cm[disableDynamicVAD{0}:disable dynamic threshold vad, instead use energy based vad only, the energy threshold can be set via the 'threshold' option]
;threshold=\cm[threshold{-13.0}:VAD energy threshold, minimum energy for dynamic vad, can be very small, it is used only as a backup; real threshold if disableDynamicVAD is set, in that case you should set the threshold to approx.]


[vad:cSemaineSpeakerID1]
reader.dmLevel=mfcc1_1-12;mfcc1de;mfcc1dede;vad11
writer.dmLevel=vad1
writer.levelconf.noHang=1
debug=0
;\cm[sldebug{0}:1=debug speech learner]
 ; 6 seconds (600) training phase before using model for classification (6 for speech , 6 for noise)
 ; set this to 0 if you load an initialisation model
trainDur = \cm[trainDur{0}:train duration for speech learner VAD]
 ; vad decay factor during vad smoothing (a0 is attack, a1 is decay of voice)
a0 = 0.05
a1 = 0.2
;;; you can use these lines to load a predefined noise/speech model (and to save it at the end)
initNoiseModel=../auxiliary/sil.model.nocms
initSpeechModel=../auxiliary/voice.model.nocms
;initNoiseModel=../auxiliary/sil.model
;initSpeechModel=../auxiliary/voice.model
;; save model at the end::
;saveSpeechModel=model.speech.out
;saveNoiseModel=model.noise.out
;;; -1 as weight indicates that no online re-training should be performed
;;; numbers > 0 indicate the initial weight in 1/100 seconds (i.e. 1000) corresponds to a model equivalent to 10 seconds of speech
speechModelWeight=800
noiseModelWeight=400
 ; (agentBlockTime - speechModelWeight) / 100  = time in seconds to wait, before being able to interrupt the agent
agentBlockTime = 1600
maxTrainTime = 6000
;speechModelWeight=1000
;; for noise model weights the same parameters exist, just replace speech by noise
 ; set this to 1 to never detect a user turn while the agent is speaking
alwaysRejectAgent=\cm[alwaysRejectAgent{0}:set this to 1 to never detect a user turn while the agent is speaking]
ruleVadOnly=\cm[ruleVadOnly{0}:use ONLY rule based VAD, do NOT use NN models trained on-the-fly or loaded from file]


[turn:cTurnDetector]
;reader.dmLevel=energy
reader.dmLevel=vad1
readVad=1
writer.dmLevel=isTurn
writer.levelconf.noHang=1
msgInterval = 2.0
messageRecp = functL1_EMO,functL1nz_EMO,functOnsets_EMO,bowProducer
;eventRecp = fftmp1z,fftmp2z,mfccz,mfcczD,mfcczA,kwj,turnOutp
eventRecp = mfcc25z_ASR,julius,turnOutp,pitchDirection_PR,mspec25ss_ASR
statusRecp = userinfoSender
;idx = 0
;autoThreshold = 0
;threshold = 0.0015
nPre=4
nPost=45
debug=\cm[turndebug{4}:set this to 1 to see turn/speaking debug messages]
maxTurnLength=8
maxTurnLengthGrace=10
