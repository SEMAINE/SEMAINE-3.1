
///////////////////////////////////////////////////////////////////////////////////////
///////// > openEAR configuration file for emotion features <        //////////////////
/////////   INTERSPEECH 2010 paralinguistics challenge               //////////////////
/////////   Pitch, Loudness, Jitter, MFCC, MFB, LSP and functionals  //////////////////
/////////                                                            //////////////////
/////////   1582 1st level functionals:                              //////////////////
/////////     (34 LLD + 34 delta) * 21 functionals                   //////////////////
/////////     +(4 LLD + 4 delta) * 19 functionals                    //////////////////
/////////     + 1 x Num. pitch onsets (pseudo syllables)             //////////////////
/////////     + 1 x turn duration in seconds                         //////////////////
/////////                                                            //////////////////
/////////  * written 2010 by Florian Eyben *                         //////////////////
/////////                                                            //////////////////
///////// (c) 2010 by Florian Eyben, Martin Wöllmer, Björn Schuller  //////////////////
/////////     see the file COPYING for details                       //////////////////
///////////////////////////////////////////////////////////////////////////////////////


//
// Usage:
// SMILExtract -C thisconfig.conf -I input.wav -O output.arff 
//   see openEAR_avic_targets.conf for options on passing target class values and word strings
//
 
///////////////////////////////////////////////////////////////////////////////////////
;
; This section is always required in openSMILE configuration files
;   it configures the componentManager and gives a list of all components which are to be loaded
; The order in which the components are listed should match 
;   the order of the data flow for most efficient processing
;
///////////////////////////////////////////////////////////////////////////////////////
[componentInstances:cComponentManager]
 ; this line configures the default data memory:
instance[dataMemory].type=cDataMemory

 ;;; wave file input
instance[waveIn].type=cWaveSource

 ;;; 25 ms frames features:
instance[fr25].type=cFramer
instance[pe].type=cVectorPreemphasis
instance[win].type=cWindower
instance[fft].type=cTransformFFT
instance[fftmagphase].type=cFFTmagphase

 ;;; write/append ONE instance to a Weka ARFF file
instance[arffsink].type=cArffSink

;; run single threaded (nThreads=1)
; NOTE: a single thread is more efficient for processing small files, since multi-threaded processing involves more 
;       overhead during startup, which will make the system slower in the end
nThreads=1
;; do not show any internal dataMemory level settings 
; (if you want to see them set the value to 1, 2, 3, or 4, depending on the amount of detail you wish)
printLevelStats=0



/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////   component configuration  ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
; the following sections configure the components listed above
; a help on configuration parameters can be obtained with 
;  SMILExtract -H
; or
;  SMILExtract -H configTypeName (= componentTypeName)
/////////////////////////////////////////////////////////////////////////////////////////////

[waveIn:cWaveSource]
 ; this sets the level this component writes to
 ; the level will be created by this component
 ; no other components may write to a level having the same name
writer.dmLevel=wave
 ; this defines a new commandline option "-I" or "-inputfile", which can be used to specify 
 ; the filename on the commandline instead of having it "hard-coded" in the config file
filename=\cm[inputfile(I){test.wav}:name of input file]
 ; mix stereo files down to mono for analysis
monoMixdown=1
start = \cm[wavestartsec{0}:start in seconds]
end = \cm[waveendsec{-1}:end in seconds]


[fr25:cFramer]
reader.dmLevel=wave
writer.dmLevel=frames
frameSize = 0.025
frameStep = 0.010
frameCenterSpecial = left

[pe:cVectorPreemphasis]
reader.dmLevel=frames
writer.dmLevel=framespe
k=0.97

[win:cWindower]
reader.dmLevel=framespe
writer.dmLevel=winframe
winFunc = ham
gain = 1.0

[fft:cTransformFFT]
reader.dmLevel=winframe
writer.dmLevel=fftc

[fftmagphase:cFFTmagphase]
reader.dmLevel=fftc
writer.dmLevel=fftmag25

  //////////////////////////////////////////////////////////////////////
 ///////////////////  feature configuration  //////////////////////
//////////////////////////////////////////////////////////////////////

\{opensmileSemaineEmoftAc.conf}

  //////////////////////////////////////////////////////////////////////
 ///////////////////  data output configuration  //////////////////////
//////////////////////////////////////////////////////////////////////

// ----- you might need to customise the arff output to suit your needs: ------

[arffsink:cArffSink]
reader.dmLevel=emoFt
 ; do not print "frameNumber" attribute to ARFF file
frameIndex=0
frameTime=1
frameTimeAdd = \cm[timeadd{0.0}:timestamp offset]
 ; name of output file as commandline option
filename=\cm[arffout(O){output.arff}:name of WEKA Arff output file]
 ; name of @relation in the ARFF file
relation=\cm[corpus{SMILEfeatures}:corpus name, arff relation]
 ; name of the current instance (usually file name of input wave file)
instanceName=\cm[instname(N){noname}:name of arff instance]

 ; this includes the file 'arff_targets.conf' which configures
 ; the target classes (ground truths) which are added to the ARFF file
 ; based on command-line options
class[0].name = classX
class[0].type = numeric
target[0].all = \cm[classX{replaceCLASS}:instance numeric class label]


 ; append to an existing file, so multiple calls of SMILExtract on different
 ; input files append to the same output ARFF file
append=1


//////---------------------- END -------------------------///////
