/**

simple failsafe VAD for clean environments, 
fixed energy threshold.

TODO: look at julius for adaptive energy thresholds...

**/


[componentInstances:cComponentManager]
 ; compute log-energy from raw signal frames 
 ; (not windowed, not pre-emphasised: that's the way HTK does it)
instance[energy_VAD].type=cEnergy
instance[turn].type=cTurnDetector


////////////////////////////////////////////////////////////////////////////////////////////////
// ~~~~~~~~~ Begin of configuration ~~~~~~~~~~~~~~~~~ //////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////


[energy_VAD:cEnergy]
reader.dmLevel=fr25
writer.dmLevel=energy_VAD
htkcompatible=0
rms = 1
log = 0

;;; TODO: a more generic reject agent component...?

[turn:cTurnDetector]
reader.dmLevel=energy_VAD
writer.dmLevel=isTurn
readVad=0
writer.levelconf.noHang=1
msgInterval = 2.0
messageRecp = functL1_EMO,functL1nz_EMO,functOnsets_EMO,bowProducer
eventRecp = mfcc25z_ASR,julius,pitchDirection_PR,turnOutp,mspec25ss_ASR
statusRecp = userinfoSender
threshold = 0.00
nPre=10
nPost=50
debug=\cm[turndebug{4}:set this to 1 to see turn/speaking debug messages]
;; TODO: check the speaking status at forced turn ends !!
maxTurnLength=4
maxTurnLengthGrace=1

