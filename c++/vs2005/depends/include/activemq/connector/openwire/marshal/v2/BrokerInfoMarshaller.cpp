/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <activemq/connector/openwire/marshal/v2/BrokerInfoMarshaller.h>

#include <activemq/connector/openwire/commands/BrokerInfo.h>
#include <activemq/exceptions/ActiveMQException.h>

//
//     NOTE!: This file is autogenerated - do not modify!
//            if you need to make a change, please see the Java Classes in the
//            activemq-core module
//

using namespace std;
using namespace activemq;
using namespace activemq::exceptions;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;
using namespace activemq::connector::openwire::marshal;
using namespace activemq::connector::openwire::utils;
using namespace activemq::connector::openwire::marshal::v2;
using namespace decaf;
using namespace decaf::io;

///////////////////////////////////////////////////////////////////////////////
DataStructure* BrokerInfoMarshaller::createObject() const {
    return new BrokerInfo();
}

///////////////////////////////////////////////////////////////////////////////
unsigned char BrokerInfoMarshaller::getDataStructureType() const {
    return BrokerInfo::ID_BROKERINFO;
}

///////////////////////////////////////////////////////////////////////////////
void BrokerInfoMarshaller::tightUnmarshal( OpenWireFormat* wireFormat, DataStructure* dataStructure, DataInputStream* dataIn, BooleanStream* bs ) throw( decaf::io::IOException ) {

    try {

        BaseCommandMarshaller::tightUnmarshal( wireFormat, dataStructure, dataIn, bs );

        BrokerInfo* info =
            dynamic_cast<BrokerInfo*>( dataStructure );
        info->setBrokerId( dynamic_cast< BrokerId* >(
            tightUnmarshalCachedObject( wireFormat, dataIn, bs ) ) );
        info->setBrokerURL( tightUnmarshalString( dataIn, bs ) );

        if( bs->readBoolean() ) {
            short size = dataIn->readShort();
            info->getPeerBrokerInfos().reserve( size );
            for( int i = 0; i < size; i++ ) {
                info->getPeerBrokerInfos().push_back( dynamic_cast< BrokerInfo* >(
                    tightUnmarshalNestedObject( wireFormat, dataIn, bs ) ) );
            }
        }
        else {
            info->getPeerBrokerInfos().clear();
        }
        info->setBrokerName( tightUnmarshalString( dataIn, bs ) );
        info->setSlaveBroker( bs->readBoolean() );
        info->setMasterBroker( bs->readBoolean() );
        info->setFaultTolerantConfiguration( bs->readBoolean() );
        info->setDuplexConnection( bs->readBoolean() );
        info->setNetworkConnection( bs->readBoolean() );
        info->setConnectionId( tightUnmarshalLong( wireFormat, dataIn, bs ) );
    }
    AMQ_CATCH_RETHROW( decaf::io::IOException )
    AMQ_CATCH_EXCEPTION_CONVERT( exceptions::ActiveMQException, decaf::io::IOException )
    AMQ_CATCHALL_THROW( decaf::io::IOException )
}

///////////////////////////////////////////////////////////////////////////////
int BrokerInfoMarshaller::tightMarshal1( OpenWireFormat* wireFormat, DataStructure* dataStructure, BooleanStream* bs ) throw( decaf::io::IOException ) {

    try {

        BrokerInfo* info =
            dynamic_cast<BrokerInfo*>( dataStructure );

        int rc = BaseCommandMarshaller::tightMarshal1( wireFormat, dataStructure, bs );
        rc += tightMarshalCachedObject1( wireFormat, info->getBrokerId(), bs );
        rc += tightMarshalString1( info->getBrokerURL(), bs );
        rc += tightMarshalObjectArray1( wireFormat, info->getPeerBrokerInfos(), bs );
        rc += tightMarshalString1( info->getBrokerName(), bs );
        bs->writeBoolean( info->isSlaveBroker() );
        bs->writeBoolean( info->isMasterBroker() );
        bs->writeBoolean( info->isFaultTolerantConfiguration() );
        bs->writeBoolean( info->isDuplexConnection() );
        bs->writeBoolean( info->isNetworkConnection() );
        rc += tightMarshalLong1( wireFormat, info->getConnectionId(), bs );

        return rc + 0;
    }
    AMQ_CATCH_RETHROW( decaf::io::IOException )
    AMQ_CATCH_EXCEPTION_CONVERT( exceptions::ActiveMQException, decaf::io::IOException )
    AMQ_CATCHALL_THROW( decaf::io::IOException )
}

///////////////////////////////////////////////////////////////////////////////
void BrokerInfoMarshaller::tightMarshal2( OpenWireFormat* wireFormat, DataStructure* dataStructure, DataOutputStream* dataOut, BooleanStream* bs ) throw( decaf::io::IOException ) {

    try {

        BaseCommandMarshaller::tightMarshal2( wireFormat, dataStructure, dataOut, bs );

        BrokerInfo* info =
            dynamic_cast<BrokerInfo*>( dataStructure );
        tightMarshalCachedObject2( wireFormat, info->getBrokerId(), dataOut, bs );
        tightMarshalString2( info->getBrokerURL(), dataOut, bs );
        tightMarshalObjectArray2( wireFormat, info->getPeerBrokerInfos(), dataOut, bs );
        tightMarshalString2( info->getBrokerName(), dataOut, bs );
        bs->readBoolean();
        bs->readBoolean();
        bs->readBoolean();
        bs->readBoolean();
        bs->readBoolean();
        tightMarshalLong2( wireFormat, info->getConnectionId(), dataOut, bs );
    }
    AMQ_CATCH_RETHROW( decaf::io::IOException )
    AMQ_CATCH_EXCEPTION_CONVERT( exceptions::ActiveMQException, decaf::io::IOException )
    AMQ_CATCHALL_THROW( decaf::io::IOException )
}

///////////////////////////////////////////////////////////////////////////////
void BrokerInfoMarshaller::looseUnmarshal( OpenWireFormat* wireFormat, DataStructure* dataStructure, DataInputStream* dataIn ) throw( decaf::io::IOException ) {

    try {

        BaseCommandMarshaller::looseUnmarshal( wireFormat, dataStructure, dataIn );
        BrokerInfo* info =
            dynamic_cast<BrokerInfo*>( dataStructure );
        info->setBrokerId( dynamic_cast< BrokerId* >( 
            looseUnmarshalCachedObject( wireFormat, dataIn ) ) );
        info->setBrokerURL( looseUnmarshalString( dataIn ) );

        if( dataIn->readBoolean() ) {
            short size = dataIn->readShort();
            info->getPeerBrokerInfos().reserve( size );
            for( int i = 0; i < size; i++ ) {
                info->getPeerBrokerInfos().push_back( dynamic_cast<BrokerInfo* >(
                    looseUnmarshalNestedObject( wireFormat, dataIn ) ) );
            }
        }
        else {
            info->getPeerBrokerInfos().clear();
        }
        info->setBrokerName( looseUnmarshalString( dataIn ) );
        info->setSlaveBroker( dataIn->readBoolean() );
        info->setMasterBroker( dataIn->readBoolean() );
        info->setFaultTolerantConfiguration( dataIn->readBoolean() );
        info->setDuplexConnection( dataIn->readBoolean() );
        info->setNetworkConnection( dataIn->readBoolean() );
        info->setConnectionId( looseUnmarshalLong( wireFormat, dataIn ) );
    }
    AMQ_CATCH_RETHROW( decaf::io::IOException )
    AMQ_CATCH_EXCEPTION_CONVERT( exceptions::ActiveMQException, decaf::io::IOException )
    AMQ_CATCHALL_THROW( decaf::io::IOException )
}

///////////////////////////////////////////////////////////////////////////////
void BrokerInfoMarshaller::looseMarshal( OpenWireFormat* wireFormat, DataStructure* dataStructure, DataOutputStream* dataOut ) throw( decaf::io::IOException ) {

    try {

        BrokerInfo* info =
            dynamic_cast<BrokerInfo*>( dataStructure );
        BaseCommandMarshaller::looseMarshal( wireFormat, dataStructure, dataOut );

        looseMarshalCachedObject( wireFormat, info->getBrokerId(), dataOut );
        looseMarshalString( info->getBrokerURL(), dataOut );
        looseMarshalObjectArray( wireFormat, info->getPeerBrokerInfos(), dataOut );
        looseMarshalString( info->getBrokerName(), dataOut );
        dataOut->writeBoolean( info->isSlaveBroker() );
        dataOut->writeBoolean( info->isMasterBroker() );
        dataOut->writeBoolean( info->isFaultTolerantConfiguration() );
        dataOut->writeBoolean( info->isDuplexConnection() );
        dataOut->writeBoolean( info->isNetworkConnection() );
        looseMarshalLong( wireFormat, info->getConnectionId(), dataOut );
    }
    AMQ_CATCH_RETHROW( decaf::io::IOException )
    AMQ_CATCH_EXCEPTION_CONVERT( exceptions::ActiveMQException, decaf::io::IOException )
    AMQ_CATCHALL_THROW( decaf::io::IOException )
}

