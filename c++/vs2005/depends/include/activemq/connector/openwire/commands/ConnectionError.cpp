/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <activemq/connector/openwire/commands/ConnectionError.h>
#include <activemq/exceptions/ActiveMQException.h>
#include <decaf/lang/exceptions/NullPointerException.h>

using namespace std;
using namespace activemq;
using namespace activemq::exceptions;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;
using namespace decaf::lang::exceptions;

/*
 *
 *  Command and marshaling code for OpenWire format for ConnectionError
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Java Classes in the
 *         activemq-core module
 *
 */
////////////////////////////////////////////////////////////////////////////////
ConnectionError::ConnectionError()
{
    this->exception = NULL;
    this->connectionId = NULL;
}

////////////////////////////////////////////////////////////////////////////////
ConnectionError::~ConnectionError()
{
    delete this->exception;
    delete this->connectionId;
}

////////////////////////////////////////////////////////////////////////////////
ConnectionError* ConnectionError::cloneDataStructure() const {
    ConnectionError* connectionError = new ConnectionError();

    // Copy the data from the base class or classes
    connectionError->copyDataStructure( this );

    return connectionError;
}

////////////////////////////////////////////////////////////////////////////////
void ConnectionError::copyDataStructure( const DataStructure* src ) {

    // Copy the data of the base class or classes
    BaseCommand<transport::Command>::copyDataStructure( src );

    const ConnectionError* srcPtr = dynamic_cast<const ConnectionError*>( src );

    if( srcPtr == NULL || src == NULL ) {
    
        throw decaf::lang::exceptions::NullPointerException(
            __FILE__, __LINE__,
            "ConnectionError::copyDataStructure - src is NULL or invalid" );
    }
    if( srcPtr->getException() != NULL ) {
        this->setException( 
            dynamic_cast<BrokerError*>( 
                srcPtr->getException()->cloneDataStructure() ) );
    }
    if( srcPtr->getConnectionId() != NULL ) {
        this->setConnectionId( 
            dynamic_cast<ConnectionId*>( 
                srcPtr->getConnectionId()->cloneDataStructure() ) );
    }
}

////////////////////////////////////////////////////////////////////////////////
unsigned char ConnectionError::getDataStructureType() const {
    return ConnectionError::ID_CONNECTIONERROR; 
}

////////////////////////////////////////////////////////////////////////////////
std::string ConnectionError::toString() const {

    ostringstream stream;

    stream << "Begin Class = ConnectionError" << std::endl;
    stream << " Value of ConnectionError::ID_CONNECTIONERROR = 16" << std::endl; 
    stream << " Value of Exception is Below:" << std::endl;
    if( this->getException() != NULL ) {
        stream << this->getException()->toString() << std::endl;
    } else {
        stream << "   Object is NULL" << std::endl;
    }
    stream << " Value of ConnectionId is Below:" << std::endl;
    if( this->getConnectionId() != NULL ) {
        stream << this->getConnectionId()->toString() << std::endl;
    } else {
        stream << "   Object is NULL" << std::endl;
    }
    stream << BaseCommand<transport::Command>::toString();
    stream << "End Class = ConnectionError" << std::endl;

    return stream.str();
}

////////////////////////////////////////////////////////////////////////////////
bool ConnectionError::equals( const DataStructure* value ) const {
    const ConnectionError* valuePtr = dynamic_cast<const ConnectionError*>( value );

    if( valuePtr == NULL || value == NULL ) {
        return false;
    }
    if( this->getException() != NULL ) {
        if( !this->getException()->equals( valuePtr->getException() ) ) {
            return false;
        }
    } else if( valuePtr->getException() != NULL ) {
        return false;
    }
    if( this->getConnectionId() != NULL ) {
        if( !this->getConnectionId()->equals( valuePtr->getConnectionId() ) ) {
            return false;
        }
    } else if( valuePtr->getConnectionId() != NULL ) {
        return false;
    }
    if( !BaseCommand<transport::Command>::equals( value ) ) {
        return false;
    }
    return true;
}

////////////////////////////////////////////////////////////////////////////////
const BrokerError* ConnectionError::getException() const {
    return exception;
}

////////////////////////////////////////////////////////////////////////////////
BrokerError* ConnectionError::getException() {
    return exception;
}

////////////////////////////////////////////////////////////////////////////////
void ConnectionError::setException(BrokerError* exception ) {
    this->exception = exception;
}

////////////////////////////////////////////////////////////////////////////////
const ConnectionId* ConnectionError::getConnectionId() const {
    return connectionId;
}

////////////////////////////////////////////////////////////////////////////////
ConnectionId* ConnectionError::getConnectionId() {
    return connectionId;
}

////////////////////////////////////////////////////////////////////////////////
void ConnectionError::setConnectionId(ConnectionId* connectionId ) {
    this->connectionId = connectionId;
}

